// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String @id @default(cuid())
  email          String @unique
  username       String @unique
  password       String
  bio            String?
  avatarUrl      String?
  followersCount Int    @default(0)
  followingCount Int    @default(0)
  createdAt      DateTime @default(now())

  // Relations
  posts          Post[]
  likes          Like[]
  saves          Save[]
  comments       Comment[]
  followers      Follow[] @relation("UserFollowers")
  following      Follow[] @relation("UserFollowing")
  sentMessages   Message[] @relation("MessageSender")
  threadAsUserA  MessageThread[] @relation("ThreadUserA")
  threadAsUserB  MessageThread[] @relation("ThreadUserB")
  notifications  Notification[]

  @@map("users")
}

model Post {
  id            String   @id @default(cuid())
  authorId      String
  title         String
  description   String?
  body          String
  tags          Json
  category      String
  sponsored     Boolean  @default(false)
  isDraft       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  likesCount    Int      @default(0)
  commentsCount Int      @default(0)
  savesCount    Int      @default(0)
  sharesCount   Int      @default(0)

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    Like[]
  saves    Save[]
  comments Comment[]

  @@map("posts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Save {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("saves")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())

  // Relations
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model MessageThread {
  id              String   @id @default(cuid())
  userAId         String
  userBId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  unreadForUserA  Int      @default(0)
  unreadForUserB  Int      @default(0)

  // Relations
  userA    User      @relation("ThreadUserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB    User      @relation("ThreadUserB", fields: [userBId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([userAId, userBId])
  @@map("message_threads")
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  senderId  String
  body      String
  createdAt DateTime @default(now())

  // Relations
  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  data      Json
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  salaryRange String?
  tags        Json
  level       String
  remote      Boolean  @default(false)
  postedAt    DateTime @default(now())
  blurb       String
  applyUrl    String

  @@map("jobs")
}

model PortalSystem {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  @@map("portal_system")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  SYSTEM
}
